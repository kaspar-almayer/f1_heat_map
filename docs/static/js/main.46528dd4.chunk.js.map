{"version":3,"sources":["helpers.ts","Column.tsx","supabaseClient.js","App.tsx","reportWebVitals.js","index.js"],"names":["getSeconds","lapTime","splitSeconds","split","splitMiliseconds","sec","Number","formatTime","timeInSeconds","minutes","Math","floor","seconds","String","toFixed","padStart","getHsl","value","range","colors","hue","getMedian","laps","sort","a","b","length","middle","round","flatLapTimes","race","data","reduce","result","currentValue","timings","push","flat","Column","driver","fontSize","className","map","lap","index","style","backgroundColor","supabase","createClient","App","useState","setRace","racesList","setRacesList","setRange","loading","setLoading","error","setError","setColors","cutout","setCutout","setFontSize","useEffect","getData","from","select","eq","races","order","ascending","allRaces","timsesInSeconds","median","timesWthoutPitstops","filter","time","min","max","getRange","excludedTimes","useMemo","calculateCutout","race_name","htmlFor","name","id","onChange","event","currentTarget","short_name","type","el","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46528dd4.chunk.js","sourcesContent":["import { Race } from \"./types\";\n\nexport const getSeconds = (lapTime: String): number => {\n  const splitSeconds = lapTime.split(\":\");\n  const splitMiliseconds = splitSeconds[1].split(\".\");\n\n  const sec = Number(splitSeconds[0]) * 60 + Number(splitMiliseconds[0]);\n  return Number(`${sec}.${splitMiliseconds[1]}`);\n};\n\nexport const formatTime = (timeInSeconds: number): string => {\n  const minutes = Math.floor(timeInSeconds / 60);\n  const seconds = String((timeInSeconds % 60).toFixed(3)).padStart(6, \"0\");\n  return `${minutes}:${seconds}`;\n};\n\nexport const getHsl = (value: number, range: number[], colors: string) => {\n  if (value < range[0] || value > range[1]) {\n    return `hsl(0, 0%, 50%)`;\n  }\n  const hue = ((value - range[0]) * Number(colors)) / (range[1] - range[0]);\n  return `hsl(${hue}, 100%, 50%)`;\n};\n\nexport const getMean = (laps: Array<number>) => {\n  return laps.reduce((a, b) => a + b, 0) / laps.length;\n};\n\nexport const getMedian = (laps: Array<number>): number => {\n  laps.sort((a, b) => a - b);\n  if (laps.length % 2 === 0) {\n    const middle = laps.length / 2;\n    return (laps[middle - 1] + laps[middle]) / 2;\n  } else {\n    return laps[Math.round(laps.length / 2)];\n  }\n};\n\nexport const getRange = (laps: Array<string>, cutout: number): number[] => {\n  const timsesInSeconds = laps.map((lapTime) => getSeconds(lapTime));\n\n  const median = Math.round(getMedian(timsesInSeconds));\n\n  const timesWthoutPitstops = timsesInSeconds.filter(\n    (time) => time < median + cutout\n  );\n\n  return [Math.min(...timesWthoutPitstops), Math.max(...timesWthoutPitstops)];\n};\n\nexport const flatLapTimes = (race: Race): string[] => {\n  return race.data\n    .reduce((result, currentValue) => {\n      if (currentValue.timings) {\n        result.push(currentValue.timings as string[]);\n      }\n      return result;\n    }, [] as string[][])\n    .flat();\n  //return race.data.map((el) => el.timings).flat()\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { getHsl, getSeconds } from \"./helpers\";\n\ntype ColumnProps = {\n  laps: string[];\n  range: Array<number>;\n  driver: string;\n  colors: string;\n  fontSize: string;\n};\n\nconst Column = ({ laps, range, driver, colors, fontSize }: ColumnProps) => {\n  return (\n    <div className=\"column\">\n      <p className=\"driver-name\">{driver}</p>\n      {laps.map((lap, index) => (\n        <p\n          key={index}\n          style={{\n            backgroundColor: getHsl(getSeconds(lap), range, colors),\n            fontSize: `${fontSize}px`,\n          }}\n        >\n          {lap}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Column;\n","import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = \"https://rkpsepkibztbweplxsli.supabase.co\"\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJrcHNlcGtpYnp0YndlcGx4c2xpIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NTc0NzE4MDAsImV4cCI6MTk3MzA0NzgwMH0.-TsomBTEZlmHZ6cS3qqbF7f1G8OLsNSgMkquuPrt1PA\"\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)","import React, { useState, useMemo, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport {\n  getRange,\n  getMedian,\n  getSeconds,\n  formatTime,\n  flatLapTimes,\n} from \"./helpers\";\nimport Column from \"./Column\";\nimport { supabase } from \"./supabaseClient\";\nimport { Race, RacesList } from \"./types\";\n\nconst calculateCutout = (laps: Array<string>, cutout: number) => {\n  const timsesInSeconds = laps.map((lapTime) => getSeconds(lapTime));\n\n  const median = Math.round(getMedian(timsesInSeconds));\n  return median + cutout;\n};\n\nfunction App() {\n  const [race, setRace] = useState<Race | null>(null);\n  const [racesList, setRacesList] = useState<RacesList>([]);\n  const [range, setRange] = useState<number[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const [colors, setColors] = useState(\"150\");\n  const [cutout, setCutout] = useState(\"7\");\n  const [fontSize, setFontSize] = useState(\"14\");\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        let { data: races, error } = await supabase\n          .from(\"races\")\n          .select(\"*\")\n          .eq(\"round\", \"11\");\n\n        let { data: allRaces, error: allRacesRrror } = await supabase\n          .from(\"races\")\n          .select(\"id,short_name\")\n          .order(\"round\", { ascending: false });\n\n        if (races) {\n          setRace(races[0] as Race);\n          setLoading(false);\n        }\n\n        if (allRaces) {\n          setRacesList(allRaces);\n        }\n\n        if (error) {\n          throw error;\n        }\n      } catch (error) {\n        setLoading(false);\n        setError(true);\n      }\n    };\n\n    getData();\n  }, []);\n\n  useEffect(() => {\n    if (race) {\n      setRange(getRange(flatLapTimes(race), Number(cutout)));\n    }\n  }, [race, cutout]);\n\n  const excludedTimes = useMemo(\n    () => (race ? calculateCutout(flatLapTimes(race), Number(cutout)) : 0),\n    [race, cutout]\n  );\n\n  const handleRaceChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const getData = async () => {\n      try {\n        let { data: races, error } = await supabase\n          .from(\"races\")\n          .select(\"*\")\n          .eq(\"id\", event?.currentTarget?.value);\n\n        if (races) {\n          setRace(races[0] as Race);\n        }\n      } catch (error) {}\n    };\n\n    getData();\n  };\n\n  const handleColorChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setColors(event?.currentTarget?.value);\n  };\n\n  const handleCutoutChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCutout(event?.currentTarget?.value);\n  };\n\n  const handleSizeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFontSize(event?.currentTarget?.value);\n  };\n\n  return (\n    <div className=\"app-wrapper\">\n      <header className=\"main-header\">\n        <h1>Lap times heat map | {race?.race_name}</h1>\n        <div className=\"race-input\">\n          <label htmlFor=\"races\">select race:</label>\n          <select\n            name=\"races\"\n            id=\"races\"\n            value={race?.id}\n            onChange={handleRaceChange}\n          >\n            {racesList.map((race) => (\n              <option key={race.id} value={race.id}>\n                {race.short_name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </header>\n      <main>\n        <div className=\"settings-wrapper\">\n          <div className=\"settings-input\">\n            <label>adjust colors:</label>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"300\"\n              value={colors}\n              onChange={handleColorChange}\n            ></input>\n          </div>\n          <div className=\"settings-input\">\n            <label>\n              exclued times over: <br />\n              <b>{formatTime(excludedTimes)}</b>\n            </label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"30\"\n              value={cutout}\n              onChange={handleCutoutChange}\n            ></input>\n          </div>\n\n          <div className=\"settings-input\">\n            <label>heat map size: {fontSize}</label>\n            <input\n              type=\"range\"\n              min=\"7\"\n              max=\"20\"\n              value={fontSize}\n              onChange={handleSizeChange}\n            ></input>\n          </div>\n        </div>\n        {loading ? <p>loading...</p> : null}\n        {error ? (\n          <p>There was a problem with data, please try again later.</p>\n        ) : null}\n\n        {race ? (\n          <div className=\"columns-wrapper\">\n            {race.data.map(\n              (el, index) =>\n                el.timings && (\n                  <Column\n                    key={index}\n                    laps={el.timings}\n                    range={range}\n                    driver={el.driver}\n                    colors={colors}\n                    fontSize={fontSize}\n                  />\n                )\n            )}\n          </div>\n        ) : null}\n      </main>\n      <footer>\n        <p>\n          lap times data:{\" \"}\n          <a href=\"http://ergast.com/mrd/\">http://ergast.com/mrd/</a>\n        </p>\n        <p>\n          inspiration:{\" \"}\n          <a href=\"https://www.reddit.com/r/formula1/comments/tps40h/2022_saudi_arabian_grand_prix_lap_time_heat_map/\">\n            https://www.reddit.com/r/formula1/comments/tps40h/2022_saudi_arabian_grand_prix_lap_time_heat_map/\n          </a>\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}